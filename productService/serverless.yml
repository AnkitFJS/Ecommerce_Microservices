# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: reduction
# "service" is the name of this project. This will also be added to your AWS resource names.
service: productService

provider:
  name: aws
  runtime: nodejs22.x
  region: ap-south-1
  httpApi:
    authorizers:
      myCognitoAuth: # custom name for cognito authorization ( used in routes )
        identitySource: $request.header.Authorization # extract jwt token from authorization header ( used for validation )
        issuerUrl: https://cognito-idp.ap-south-1.amazonaws.com/ap-south-1_Xt0F5wn2M # url of cognito user pool( needed to verify the token )
        audience: 
          - 70qfnhobtjp6o4mn70gnkpas8t # cognito app client ID ( ensures tokens comes from right app )
resources:
  Resources:
   # product table dynamodb
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    # product images bucket congiguration
    ProductImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: product-images-nidhi-8417973113-dev
functions:
  hello:
    handler: handler.hello
    events:
      # - http:
      #     path: /
      #     method: get
      #     authorizer:
      #       type: COGNITO_USER_POOLS
      #       arn: arn:aws:cognito-idp:ap-south-1:511551295071:userpool/ap-south-1_Xt0F5wn2M
      #       identitySource: method.request.header.Authorization
      - httpApi:
          path: /
          method: get
          authorizer:
            name: myCognitoAuth # name of the cognito authorizer defined in provider section

